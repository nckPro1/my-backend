package com.example.bida.service;

import com.example.bida.entity.Session;
import com.example.bida.entity.Table;
import com.example.bida.entity.TableStatus;
import com.example.bida.repository.SessionRepository;
import com.example.bida.repository.TableRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.LocalDateTime;

@Service
public class SessionService {

    @Autowired
    private SessionRepository sessionRepository;

    @Autowired
    private TableRepository tableRepository;

    // ‚úÖ B·∫Øt ƒë·∫ßu phi√™n ch∆°i
    public Session startSession(Long tableId) {
        Table table = tableRepository.findById(tableId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†n"));

        if (table.getStatus() == TableStatus.PLAYING) {
            throw new RuntimeException("B√†n ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng");
        }

        Session session = new Session();
        session.setTable(table);
        session.setStartTime(LocalDateTime.now());

        table.setStatus(TableStatus.PLAYING);
        tableRepository.save(table);

        return sessionRepository.save(session);
    }

    // ‚úÖ K·∫øt th√∫c phi√™n ch∆°i theo sessionId (n·ªôi b·ªô d√πng)
    public Session endSession(Long sessionId) {
        Session session = sessionRepository.findById(sessionId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y phi√™n"));

        if (session.getEndTime() != null) {
            throw new RuntimeException("Phi√™n ƒë√£ k·∫øt th√∫c");
        }

        LocalDateTime endTime = LocalDateTime.now();
        session.setEndTime(endTime);

        // üéØ T√≠nh to√°n th·ªùi gian v√† gi√° ti·ªÅn d·ª±a tr√™n pricePerHour c·ªßa table
        Duration duration = Duration.between(session.getStartTime(), endTime);
        long totalMinutes = duration.toMinutes();

        // üí∞ S·ª≠ d·ª•ng gi√° t·ª´ table thay v√¨ hardcode
        Table table = session.getTable();
        double pricePerMinute = table.getPricePerHour() / 60.0;
        double totalPrice = totalMinutes * pricePerMinute;

        session.setTotalMinutes(totalMinutes);
        session.setTotalPrice(totalPrice);

        table.setStatus(TableStatus.AVAILABLE);
        tableRepository.save(table);

        return sessionRepository.save(session);
    }

    // ‚úÖ K·∫øt th√∫c phi√™n ch∆°i theo tableId (d√πng t·ª´ controller)
    public Session endSessionByTableId(Long tableId) {
        Table table = tableRepository.findById(tableId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†n"));

        Session session = sessionRepository.findByTableAndEndTimeIsNull(table)
                .orElseThrow(() -> new RuntimeException("B√†n n√†y kh√¥ng c√≥ phi√™n ƒëang ch∆°i"));

        return endSession(session.getId());
    }

    // üÜï L·∫•y session ƒëang ch∆°i c·ªßa b√†n (ƒë·ªÉ frontend hi·ªÉn th·ªã th√¥ng tin)
    public Session getActiveSession(Long tableId) {
        Table table = tableRepository.findById(tableId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†n"));

        return sessionRepository.findByTableAndEndTimeIsNull(table)
                .orElse(null);
    }

    // üÜï T√≠nh to√°n realtime cho frontend
    public double calculateCurrentPrice(Long tableId) {
        Session session = getActiveSession(tableId);
        if (session == null) return 0.0;

        Duration duration = Duration.between(session.getStartTime(), LocalDateTime.now());
        long currentMinutes = duration.toMinutes();

        Table table = session.getTable();
        double pricePerMinute = table.getPricePerHour() / 60.0;

        return currentMinutes * pricePerMinute;
    }

    // üÜï T√≠nh th·ªùi gian ch∆°i hi·ªán t·∫°i (ph√∫t)
    public long calculateCurrentMinutes(Long tableId) {
        Session session = getActiveSession(tableId);
        if (session == null) return 0L;

        Duration duration = Duration.between(session.getStartTime(), LocalDateTime.now());
        return duration.toMinutes();
    }
}